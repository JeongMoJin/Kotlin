상속 (inheritance)
// 상속이 필요한 경우
    - 확장된 클래스를 만들고 싶은 경우
        - class Warrior(){ -> 바탕이 되는 클래스
            fun attack(){}
        }
        - class DefenseWarrior(){ -> 확장된 클래스
            fun attack(){}
            fun defense(){}
        }
        - class HardAttackWarrior(){ -> 확장된 클래스
            fun attack(){}
            fun hardAttack(){}
        }
    - 이미 존재하는 클래스를 합칠 때

- 키워드
    - open 이라는 키워드로 설정된 클래스만 상속 할 수 있다
    - open 키워드는 class 클래스 앞에 적어준다
    - final로 설정된 클래스는 상속할 수 없다 -> 기본
- 슈퍼클래스/서브클래스, 부모클래스/자식클래스
- 서브클래스는 슈퍼클래스의 생성을 책임져야한다
- 슈퍼클래스 사용하고 있는 멤버와 동일한 일므의 멤버를 만들 수 없다
- 자식클래스는 부모클래스가 가지고있는 모든 것을 물려받는다
- 상속은 여러번 할 수 있다
- 다중상속은 불가능하다(A,B를 상속하는 클래스 C는 없다)

오버로딩 (Overloading)
- 동일한 함수를 복수개 만드는 것을 불가능하다
    -> 코틀린이 복수개 있는 경우에 어떤 걸 사용자가 사용하기를 원했는 지 알 수 없기 때문
fun sum(a:Int, b:Int): Int {return a+b}
fun sum(a:Int, b:Int): Int {return a+b}

sum(1,2)
- 어떤 걸 사용자가 사용하기를 원했는지 알 수 있다면 동일한 이름의 함수를 복수개 만들 수 있다
    - 함수가 받는 인자가 다른 경우
    fun sum(a : Int, b:Int):Int {return a+b}
    fun sum(a : Int):Int { return a + 10 }

    sum(10,20)
    sum(10)
    - 함수가 리턴하는 타입이 다른 경우
        fun sum(a:Int, b:Int):Int {return a+b}
        fun sum(a:Int, b 




